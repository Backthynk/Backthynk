#!/bin/bash

# Help script for Development Makefile
source "$(dirname "$0")/../common/load-config.sh"

echo -e "${BOLD}${CYAN}Development Makefile${NC}"
echo -e "${CYAN}==============================${NC}"
echo ""
echo -e "${BOLD}Available targets:${NC}"
echo ""
echo -e "  ${YELLOW}Bundle:${NC}"
echo -e "    ${GREEN}make bundle debug${NC}        Bundle assets without minification (for debugging)"
echo -e "    ${GREEN}make bundle full${NC}         Bundle assets with full minification and tree-shaking"
echo -e ""
echo -e "  ${YELLOW}Build:${NC}"
echo -e "    ${GREEN}make build auto${NC}          Auto-detect current platform and build"
echo -e "    ${GREEN}make build all${NC}           Build for all platforms"
echo -e "    ${GREEN}make build type <platform>${NC}  Build for specific platform"
echo -e "                             • Platforms: linux-amd64, linux-arm64, macos-amd64, macos-arm64, windows-amd64"
echo -e "                             • Output: ${CYAN}releases/<platform>/${BINARY_NAME}-v${APP_VERSION}${NC}"
echo -e "    ${GREEN}make build-with-docker${NC}   Build all platforms in Docker (reproducible builds)"
echo -e "                             • Requires: Docker installed and running"
echo -e "                             • Output: ${CYAN}releases/<platform>/*${NC} + SHA256SUMS.txt + BUILD_INFO.txt"
echo -e ""
echo -e "  ${YELLOW}Run:${NC}"
echo -e "    ${GREEN}dev${NC}                      Run server in development mode (go run, no build)"
echo -e "    ${GREEN}dev-prod${NC}                 Run server with production assets (go run + production env)"
echo -e "    ${GREEN}run${NC}                      Alias for 'dev'"
echo ""
echo -e "  ${YELLOW}Clean:${NC}"
echo -e "    ${GREEN}clean${NC}                    Clean build artifacts"
echo -e "    ${GREEN}fclean${NC}                   Deep clean (build, cache, node_modules)"
echo ""
echo -e "  ${YELLOW}Testing:${NC}"
echo -e "    ${GREEN}test${NC}                     Run all backend unit tests"
echo -e "    ${GREEN}test-verbose${NC}             Run all backend unit tests with verbose output"
echo ""
echo -e "  ${YELLOW}Release:${NC}"
echo -e "    ${GREEN}release${NC}                  Tag and trigger GitHub Actions to build & publish release"
echo -e "    ${GREEN}release-status${NC}           Check the status of the latest release workflow"
echo -e "    ${GREEN}release-clean${NC}            Clean up a failed release (delete tag and GitHub release)"
echo ""
echo -e "${GRAY}For development tools (generate posts, list categories), see:${NC}"
echo -e "${GRAY}  cd scripts/dev && make help${NC}"
echo ""
