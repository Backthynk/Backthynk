name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for verification

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '24'

      - name: Cache osxcross toolchain
        id: cache-osxcross
        uses: actions/cache@v4
        with:
          path: /tmp/osxcross
          key: osxcross-macos15.5-${{ runner.os }}
          restore-keys: |
            osxcross-macos15.5-

      - name: Install build dependencies
        run: |
          # Install required system packages
          sudo apt-get update
          sudo apt-get install -y \
            curl \
            jq \
            gzip \
            brotli \
            sed \
            gawk \
            coreutils \
            findutils \
            rsync \
            gcc-aarch64-linux-gnu \
            gcc-mingw-w64-x86-64

          # Install Node.js bundling tools
          npm install -g esbuild postcss cssnano postcss-cli

          # Install osxcross for macOS cross-compilation
          if [ "${{ steps.cache-osxcross.outputs.cache-hit }}" != "true" ]; then
            echo "Building osxcross from scratch..."
            git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross
            cd /tmp/osxcross
            wget -nc https://github.com/joseluisq/macosx-sdks/releases/download/15.5/MacOSX15.5.sdk.tar.xz -O tarballs/MacOSX15.5.sdk.tar.xz
            UNATTENDED=1 ./build.sh
          else
            echo "Using cached osxcross toolchain"
          fi
          echo "/tmp/osxcross/target/bin" >> $GITHUB_PATH

      - name: Extract version from tag
        id: get_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Read version from config
        id: config_version
        run: |
          CONFIG_VERSION=$(jq -r '.app.version' scripts/.config.json)
          echo "config_version=$CONFIG_VERSION" >> $GITHUB_OUTPUT

      - name: Check version match
        run: |
          if [ "${{ steps.get_version.outputs.version }}" != "${{ steps.config_version.outputs.config_version }}" ]; then
            echo "Error: Tag version (${{ steps.get_version.outputs.version }}) does not match config version (${{ steps.config_version.outputs.config_version }})"
            exit 1
          fi

      - name: Check for existing release
        run: |
          if gh release view v${{ steps.get_version.outputs.version }} &> /dev/null; then
            echo "Error: Release v${{ steps.get_version.outputs.version }} already exists"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run tests
        run: |
          echo "Running tests..."
          go test -v ./... || { echo "Tests failed!"; exit 1; }

      - name: Build bundle
        run: |
          echo "Building optimized bundle..."
          ./scripts/bundle/bundle.sh --full

      - name: Build binaries for all platforms
        run: |
          echo "Building binaries for all platforms..."
          ./scripts/makefile/build.sh --all

      - name: Create release archives
        run: |
          echo "Creating platform-specific archives..."
          ./scripts/makefile/publish.sh

      - name: Generate build info and checksums
        id: build_info
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          REPO_URL="https://github.com/${{ github.repository }}"

          # Generate BUILD_INFO from template
          sed -e "s|{{VERSION}}|${{ steps.get_version.outputs.version }}|g" \
              -e "s|{{COMMIT_SHA}}|$COMMIT_SHA|g" \
              -e "s|{{REF_NAME}}|${GITHUB_REF#refs/*/}|g" \
              -e "s|{{BUILD_DATE}}|$BUILD_DATE|g" \
              -e "s|{{BUILDER}}|GitHub Actions|g" \
              -e "s|{{REPO_URL}}|$REPO_URL|g" \
              docs/templates/build-info.txt > archives/v${{ steps.get_version.outputs.version }}/BUILD_INFO.txt

          # Generate checksums
          cd archives/v${{ steps.get_version.outputs.version }}
          sha256sum *.tar.gz *.zip > SHA256SUMS.txt 2>/dev/null || shasum -a 256 *.tar.gz *.zip > SHA256SUMS.txt

          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_short=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

      - name: Extract changelog and generate release notes
        id: release_notes
        run: |
          # Source load-config to get get_version_changelog function
          source ./scripts/common/load-config.sh

          # Get changelog for current version
          CHANGELOG=$(get_version_changelog || echo "")

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release v${{ steps.get_version.outputs.version }}"
          fi

          # Read checksums
          CHECKSUMS=$(cat archives/v${{ steps.get_version.outputs.version }}/SHA256SUMS.txt)

          # Generate release notes from template
          sed -e "s|{{CHANGELOG}}|$CHANGELOG|g" \
              -e "s|{{VERSION}}|${{ steps.get_version.outputs.version }}|g" \
              -e "s|{{REPO_URL}}|${{ steps.build_info.outputs.repo_url }}|g" \
              -e "s|{{COMMIT_SHA}}|${{ steps.build_info.outputs.commit_sha }}|g" \
              -e "s|{{COMMIT_SHORT}}|${{ steps.build_info.outputs.commit_short }}|g" \
              -e "s|{{CHECKSUMS}}|$CHECKSUMS|g" \
              docs/templates/release-notes.md > /tmp/release_notes.md

          echo "notes_file=/tmp/release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            archives/v${{ steps.get_version.outputs.version }}/*.tar.gz
            archives/v${{ steps.get_version.outputs.version }}/*.zip
            archives/v${{ steps.get_version.outputs.version }}/BUILD_INFO.txt
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
